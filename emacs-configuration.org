* Performance
Decrease the GC frequency by setting the threshold high for
configuration loading. The threshold will be set lower at the end of
the configuration to make each GC call faster for normal emacs use.
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 60 1024 1024))
#+end_src
         
* Using straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  ;; https://github.com/Cobaltarena/emacs-config
  ;; The void-function org-file-name-concat error occurs 
  ;; (straight-use-package 'org)

  (setq straight-use-package-by-default t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))
#+end_src

* Org mode

#+begin_src emacs-lisp
  ;; SOLVED: org-file-name-concat error
  (use-package org
    :straight (:type built-in))
#+end_src

* Personal information
#+begin_src emacs-lisp
  (setq user-full-name "xrlisp"
        user-mail-address "srolisp@gmail.com"
        calendar-latitude 35.866669
        calendar-longitude 128.600006
        calendar-location-name "Daegu, Korea")
#+end_src

* appearance
#+begin_src emacs-lisp
  (setq frame-background-mode 'dark)

  ;; Highlight current line
  (global-hl-line-mode t)

  ;; Show line number on the left hand side of the code 
  (global-display-line-numbers-mode)

  ;; Show matching parenthesis
  (show-paren-mode t)

  ;; Detailed window title
  (setq-default frame-title-format (list "%65b %f"))
  (setq-default icon-title-format (list "%b"))

  ;; Show line and column number in mode line
  (column-number-mode t)
  (line-number-mode t)

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  ;; Show time in mode line
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
  (display-time-mode t)
#+end_src

* Convenient
#+begin_src emacs-lisp
  (use-package counsel
    :diminish ivy-mode
    :diminish counsel-mode
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :init
    (ivy-mode 1)
    (counsel-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

  (use-package ivy-xref
    :init
    ;; xref initialization is different in Emacs 27 - there are two different
    ;; variables which can be set rather than just one
    (when (>= emacs-major-version 27)
      (setq xref-show-definitions-function #'ivy-xref-show-defs))
    ;; Necessary in Emacs <27. In Emacs 27 it will affect all xref-based
    ;; commands other than xref-find-definitions (e.g. project-find-regexp)
    ;; as well
    (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))

  (use-package ivy-prescient
    :after counsel
    :init
    (ivy-prescient-mode)
    (prescient-persist-mode))

  (use-package prescient
    :diminish
    :config)

  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))

  (use-package company
    :diminish company-mode
    :bind (:map company-active-map
                ("<tab>" . nil)
                ("TAB" . nil)
                ("M-<tab>" . company-complete-common-or-cycle)
                ("M-<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("M-<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.01)
    :config)

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1)
    (prescient-persist-mode))

  (use-package company-box
    :ensure frame-local
    :hook (company-mode . company-box-mode))

  (use-package yasnippet-snippets)
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (yas-reload-all))
#+end_src

* Basic
#+begin_src emacs-lisp
  ;; Make the y or n suffice for a yes or no question
  (fset 'yes-or-no-p 'y-or-n-p)

  (save-place-mode t)

  (setq debug-on-error t)

  (setq tab-width 4)
  (setq-default indent-tabs-mode nil) 

  (setq scroll-error-top-bottom t)
  (setq scroll-margin 1)
  (setq scroll-step 1)

  (global-font-lock-mode t)
  (setq font-lock-maximum-decoration t)

  (delete-selection-mode t)

  (setq kill-whole-line t)

  (setq track-eol t)

  (global-auto-revert-mode t)

  (setq truncate-lines t)

  ;; Do not show welcome screen
  (setq inhibit-startup-screen t)

  ;; Time stamping
  (setq  time-stamp-active t          ; do enable time-stamps
         time-stamp-line-limit 70     ; check first 70 buffer lines for Time-stamp:
         time-stamp-format "%Y-%02m-%02d %02H:%02M:%02S (%u)") ; date format
  (add-hook 'write-file-hooks 'time-stamp)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

#+end_src

* Miscellaneous
#+begin_src emacs-lisp

#+end_src

* Development
#+begin_src emacs-lisp
  (use-package treemacs)

  (use-package magit
    :defer t
    :bind ("C-c m" . magit-status))

  (use-package projectile
    :diminish projectile-mode
    :hook
    (after-init . projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (setq projectile-project-search-path '("~/Pg"))
    (setq projectile-switch-project-action #'projectile-dired)
    :custom
    (projectile-completion-system 'ivy)
    (projectile-dynamic-mode-line nil)
    (projectile-enable-caching t)
    (projectile-indexing-method 'hybrid)
    (projectile-track-known-projects-automatically nil))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

  (use-package flycheck
    :diminish flycheck-mode
    :init
    (setq flycheck-check-syntax-automatically '(save new-line)
          flycheck-idle-change-delay 5.0
          flycheck-display-errors-delay 0.9
          flycheck-highlighting-mode 'symbols
          flycheck-indication-mode 'left-fringe
          flycheck-standard-error-navigation t
          flycheck-deferred-syntax-check nil))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook 
    (lsp-mode . lsp-enable-which-key-integration)
    :custom
    (lsp-diagnostics-provider :capf)
    (lsp-headerline-breadcrumb-enable t)
    (lsp-headerline-breadcrumb-segments '(project file symbols))
    (lsp-lens-enable nil)
    (lsp-disabled-clients '((python-mode . pyls)))
    :init
    (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
    :config)

  (use-package lsp-ivy
    :after lsp-mode)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :after lsp-mode
    :custom
    (lsp-ui-doc-show-with-cursor nil)
    :config
    (setq lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after (lsp-mode treemacs))

#+end_src

** elisp
#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+end_src

** python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook
    (python-mode . (lambda ()
                     (require 'lsp-pyright)
                     (lsp-deferred))))
  (use-package pyvenv
    :ensure t
    :init
    (setenv "WORKON_HOME" "~/.venvs/")
    :config
    ;; (pyvenv-mode t)

    ;; Set correct Python interpreter
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))

    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))

  (use-package blacken
    :init
    (setq-default blacken-fast-unsafe t)
    (setq-default blacken-line-length 80))

  (use-package python-mode
    :hook
    (python-mode . pyvenv-mode)
    (python-mode . flycheck-mode)
    (python-mode . company-mode)
    (python-mode . blacken-mode)
    (python-mode . yas-minor-mode)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    :config)

#+end_src
*** installation
pyright
#+begin_src bash
  curl -sL https://deb.nodesource.com/setup_17.x -o /tmp/nodesource_setup.sh
  sudo bash /tmp/nodesource_setup.sh
  sudo apt install nodejs
  sudo apt install npm
  sudo npm install -g npx
  git clone https://github.com/Microsoft/pyright.git
  cd pyright
  sudo npm i -g pyright
  # TODO: need below?
  sudo npm run install:all
  sudo npm run build:cli:dev
#+end_src
virtualenv
#+begin_src bash
  sudo apt-get install virtualenv
#+end_src

#+begin_src bash
  cd ~/.venvs
  virtualenv --python=python3 foo_env
  source foo_env/bin/activate
  deactivate
#+end_src
.dir-locals.el
#+begin_src emacs-lisp
  ;; ((python-mode . ((pyvenv-workon . "hackerrank-project"))))
 #+end_src
pyrightconfig.json
#+begin_src json
{
  "include": [
    "hackerrank"
  ],
  "executionEnvironments": [
    {
      "root": "hackerrank/src"
    }
  ]
}
#+end_src
direnv
conda
Because anaconda does not support the aarchi64 platform, use archiconda or miniforge.
#+begin_src bash
  curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge-pypy3-Linux-aarch64.sh"
  bash Miniforge-pypy3-Linux-aarch64.sh
#+end_src
~/.direnvrc
#+begin_src bash
layout_anaconda() {
  local ANACONDA_HOME="${HOME}/miniconda3/"
  PATH_add "$ANACONDA_HOME"/bin

  if [ -n "$1" ]; then
    # Explicit environment name from layout command.
    local env_name="$1"
    source activate ${env_name}
  elif (grep -q name: environment.yml); then
    # Detect environment name from `environment.yml` file in `.envrc` directory
    source activate `grep name: environment.yml | sed -e 's/name: //' | cut -d "'" -f 2 | cut -d '"' -f 2`
  else
    (>&2 echo No environment specified);
    exit 1;
  fi;
}
#+end_src
~/.bashrc
#+begin_src bash
  show_virtual_env() {
      if [ -n "$VIRTUAL_ENV"]; then
          echo "($(basename $VIRTUAL_ENV))"
      elif [ -n "$CONDA_DEFAULT_ENV" ]; then
          echo "($(basename $CONDA_DEFAULT_ENV))"
      fi
  }
  export show_virtual_env
  PS1='$(show_virtual_env)'$PS1
#+end_src
#+begin_src bash
## BASH -> ~/.bashrc
eval "$(direnv hook bash)"
#+end_src

* direnv
#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

* Org mode
#+begin_src emacs-lisp
  ;;  (use-package org
  ;; :ensure org-plus-contrib
  ;; :ensure org-tempo
  ;;    :custom 
  ;; Tab keeps indenting in src blocks
  ;;    (org-src-tab-acts-natively t)
  ;; IDO for completion when applicable
  ;;    (org-completion-use-ido t)
  ;; hide emphasis markers
  ;;  (org-hide-emphasis-markers t)
  ;;    :config
  ;; (require 'org-tempo)
  ;;    (add-hook 'org-mode-hook 
  ;;              (lambda ()
  ;;                (setq org-file-apps
  ;;                      '(("org" . emacs)
  ;;                        ("rs"  . emacs)
  ;;                        ("c"   . emacs)
  ;;                        ("h"   . emacs))))))
  ;; (setq org-hide-leading-stars t)
  (setq org-startup-indented t)
  (setq org-indent-mode-turns-on-hiding-stars t)
  ;; (when (and (eq 'light (frame-parameter nil 'background-mode))
  ;;            (color-defined-p "brightwhite"))

  ;; TODO: The foreground and bckground colors are not exactly the same.
  (set-face-foreground 'org-hide "#002B00")
  ;; )
  ;; (setq initial-major-mode 'org-mode)

  ;; (global-set-key (kbd "C-c l") 'org-store-link)
  ;; (global-set-key (kbd "C-c a") 'org-agenda)
  ;; (global-set-key (kbd "C-c c") 'org-capture)

  ;; (add-to-list 'org-structure-template-alist
  ;;              '("el" . "src emacs-lisp"))

  ;; ;; TODO: org agenda
  ;; (setq org-log-done 'time)
  ;; (setq org-enforce-todo-dependencies t)
  ;; (setq org-enforce-todo-checkbox-dependencies t)
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "WAITING" "|" "DONE")))
  ;; (setq org-directory "~/Documents/org")

  ;; (defun org-file-path (filename)
  ;;   "Return the absolute address of an org file, given its relative name."
  ;;   (concat (file-name-as-directory org-directory) filename))

  ;; (setq org-index-file (org-file-path "index.org"))
  ;; (setq org-archive-location
  ;;       (concat (org-file-path "archive.org") "::* From %s"))
  ;; (setq org-agenda-files (list org-index-file
  ;;                              "~/.emacs.d/emacs-configuration.org"
  ;;                              (org-file-path "work.org")
  ;;                              (org-file-path "archive.org"))) ; Just in case I forget to mark a subtask as done and archive the main one
  ;; (defun hrs/mark-done-and-archive ()
  ;;   "Mark the state of an org-mode item as DONE and archive it."
  ;;   (interactive)
  ;;   (org-todo 'done)
  ;;   (org-archive-subtree))

  ;; (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
  ;; (setq org-agenda-start-on-weekday nil)
  ;; (setq org-agenda-span 15)
  ;; (setq org-agenda-custom-commands
  ;;       '(("a" "Agenda"
  ;;          (
  ;;           (agenda ""  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))
  ;;           (alltodo "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline 'todo 'done))))
  ;;           ))))
  ;; (setq org-capture-templates
  ;;       '(("f" "Finished book"
  ;;          table-line (file "~/Documents/org/books-read.org")
  ;;          "| %^{Title} | %^{Author} | %u |")

  ;;         ("t" "Todo"
  ;;          entry
  ;;          (file+headline org-index-file "Tâches")
  ;;          "* TODO %?\n:PROPERTIES:\nCREATED: %u\n:END:\n")

  ;;         ("b" "Bookmarks"
  ;;          table-line (file "~/Documents/org/bookmarks.org")
  ;;          "| %^{prompt|rust|other} | %^{url} | %^{what}")


  ;;         ("c" "Cycling"
  ;;          table-line (file "~/Documents/org/cycling.org")
  ;;          "| %t | balade | %^{prompt|standard|électrique} | %^{Distance} |")

  ;;         ("w" "Cycling to work"
  ;;          table-line (file "~/Documents/org/cycling.org")
  ;;          "| %t | boulot | %^{prompt|électrique|standard} | 26.2 |")))
  ;; (use-package org-tree-slide
  ;;   :config
  ;;   (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
  ;;   )
  ;; ;; ;; Add Beamer to export list
  ;; ;; (require 'ox-beamer)
  ;; ;; ;; And markdown
  ;; ;; (require 'ox-md)

  ;; ;; ;; some HTML slide export engines
  ;; ;; (use-package ox-html5slide)
  ;; ;; (use-package ox-impress-js)
  ;; ;; (use-package ox-reveal)     
  ;; ;; (use-package ox-spectacle )

  ;; ;; ;; bootstrap html
  ;; ;; (use-package ox-twbs)
  ;; ;; ;; Configure ox-latex to export source block using minted
  ;; ;; ;; Setting minted cache to false as cache seems to fail when changing the output-directory
  ;; ;; (add-to-list 'org-latex-packages-alist '("cache=false" "minted"))
  ;; ;; (setq org-latex-listings 'minted)

  ;; ;; (setq org-latex-pdf-process
  ;; ;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;; ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;; ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  ;; ;; (use-package htmlize)
  ;; ;; (use-package gnuplot)
  ;; ;; (use-package gnuplot-mode)
  ;;  (use-package ob-rust)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (latex . t)
     (gnuplot . t)
     (dot . t)
     (java . t)
     (python . t)
     (makefile . t)
     (org . t)
     (perl . t)
     (sed . t)
     (shell . t)
     ;; (rust . t)
     ))
  (setq org-latex-pdf-process
        '("latexmk -f -pdf -%latex=pdflatex -interaction=nonstopmode -output-directory=%o %f"))
  ;; (with-eval-after-load 'ox-latex
  ;;   (add-to-list 'org-latex-classes
  ;;                '("IEEEtran"
  ;;                  "\\documentclass{IEEEtran}
  ;;          [NO-DEFAULT-PACKAGES]
  ;;          [PACKAGES]
  ;;          [EXTRA]"
  ;;                  ("\\section{%s}" . "\\section*{%s}")
  ;;                  ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
  ;;                  )))
  ;; ;; (setq org-src-preserve-indentation t)
  ;; ;; (setq org-confirm-babel-evaluate nil)
  ;; ;; (use-package graphviz-dot-mode)
  ;; ;; (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
  ;; ;; (setq org-export-with-smart-quotes t)
  ;; ;; (setq org-babel-python-command "python3")
  ;; ;; (setq org-babel-min-lines-for-block-output 10)

  ;; TODO:
  ;; https://gitlab.univ-lille.fr/michael.hauspie/emacs/-/blob/master/configuration.org
  ;; Developpement - LSP
#+end_src
 
* org-latex-IEEEtran
Prerequisites
+ pandoc
  #+begin_src bash
    sudo dpkg -i pandoc-2.18-1-arm64.deb
  #+end_src

Installation 
#+begin_src emacs-lisp
  (use-package bibtex-completion)
  (use-package org-ref)
#+end_src

* org-noter
;; #+begin_src emacs-lisp
;;   (use-package org-noter)
;; #+end_src
  
* tex
Installation
#+begin_src bash
  sudo apt install texlive-ful
#+end_src
For HANGLE
# #+Latex_HEADER: \usepackage{kotex}

* pdf-tools
Can't view pdf file in terminal like blink shell
#+begin_src bash
  sudo apt install libpng-dev zlib1g-dev libpoppler-glib-dev
  sudo apt install imagemagick
#+end_src

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

When latexmk error occur
#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("latexmk -f -pdf -%latex=pdflatex -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

* for clisp
#+begin_src bash
  sudo apt-get -y install git build-essential automake libcurl4-openssl-dev
  git clone -b release https://github.com/roswell/roswell.git
  cd roswell
  sh bootstrap
  ./configure
  make
  sudo make install
  ros setup
#+end_src

Newest sbcl, because sbcl-bin seems not to support multithreading
#+begin_src bash
  ros install sbcl
#+end_src
Installed list
#+begin_src bash
  ros list installed
#+end_src
Check for the currently active implementation/version
#+begin_src bash
  ros run -- --version
#+end_src
Switch to another implementation/version
#+begin_src bash
  ros use sbcl/2.1.7
#+end_src

for rlwrap
#+begin_src bash
  sudo apt-get install rlwrap
#+end_src
after installing, apt-get messages
# update-alternatives: using /usr/bin/rlwrap to provide /usr/bin/readline-editor (readline-editor) in auto mode
# update-alternatives: warning: skip creation of /usr/share/man/man1/readline-editor.1.gz because associated file /usr/share/man/man1/rlwrap.1.gz (of link group readline-editor) doesn't exist

slime
#+begin_src bash
  ros install sbcl
#+end_src
ros install slime

# Installing from github 2022.04.01
# Downloading http://beta.quicklisp.org/dist/quicklisp-versions.txt
# [##########################################################################]100%
# Downloading http://beta.quicklisp.org/dist/quicklisp/2022-04-01/distinfo.txt
# [##########################################################################]100%
# Downloading http://beta.quicklisp.org/dist/quicklisp/2022-04-01/releases.txt
# [##########################################################################]100%
# Downloading http://beta.quicklisp.org/archive/slime/2022-02-20/slime-v2.27.tgz
# [##########################################################################]100%
# helper.el installed in "/home/srolisp/.roswell/helper.el"

# To use, add this to your ~/.emacs:

#   (load (expand-file-name "~/.roswell/helper.el"))

ros install swank
#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :config
    (load (expand-file-name "~/.roswell/helper.el"))
    ;; set memory of sbcl to your machine's RAM size for sbcl and clisp
    ;; (but for others - I didn't used them yet)
    (defun linux-system-ram-size ()
      (string-to-number (shell-command-to-string "free --mega | awk 'FNR == 2 {print $2}'")))
    ;; (linux-system-ram-size)
    (setq inferior-lisp-program (concat "ros -Q dynamic-space-size="     
                                        (number-to-string (linux-system-ram-size)) 
                                        " run"))
    ;; and for fancier look I personally add:
    (setq slime-contribs '(slime-fancy))
    ;; ensure correct indentation e.g. of `loop` form
    (add-to-list 'slime-contribs 'slime-cl-indent)
    ;; don't use tabs
    (setq-default indent-tabs-mode nil))
#+end_src

Start the REPL(by using `rlwrap`)
#+begin_src bash
  ros run
  # or better: rlwrap -ing sbcl is very helpful, because the
  # "naked" sbcl REPL doesn't allow jumps inside the line or other useful
  # editing commands which one is used to when using the ubuntu shell REPL.
  rlwrap ros run
#+end_src

* finally
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1024 1024))
#+end_src

